name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development
      rebuild_type:
        description: 'Type of rebuild'
        required: true
        default: 'admin-panel-fix'
        type: choice
        options:
          - full
          - backend-only
          - admin-only
          - admin-panel-fix
          - xui-only

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set up SSH
        if: inputs.environment == 'production'
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          if_key_exists: fail

      - name: Execute Advanced Fix Script for Admin Panel
        if: inputs.environment == 'production' && inputs.rebuild_type == 'admin-panel-fix'
        env:
          SSH_USER: organic
          SERVER_IP: ${{ secrets.VPN_DOMAIN }}
        run: |
          echo "Executing Advanced Admin Panel Fix remotely..."
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=accept-new $SSH_USER@$SERVER_IP << 'ENDSSH'
            cd ~/dev/vpnservice
            git pull
            chmod +x fix-admin-panel-advanced.sh
            ./fix-admin-panel-advanced.sh
          ENDSSH

      - name: Deploy and Fix Admin Panel
        if: inputs.environment == 'production' && (inputs.rebuild_type == 'admin-only' || inputs.rebuild_type == 'full')
        env:
          SSH_USER: organic
          SERVER_IP: ${{ secrets.VPN_DOMAIN }}
        run: |
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=accept-new $SSH_USER@$SERVER_IP << 'ENDSSH'
            cd ~/dev/vpnservice
            
            # Save original .env file
            cp .env .env.backup

            # Update environment variables for the admin panel
            # Ensure all NEXT_PUBLIC vars are correctly set
            grep -v "NEXT_PUBLIC" .env > .env.new
            cat >> .env.new << EOF
            NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_KEY}
            NEXT_PUBLIC_API_URL=http://backend:3000
            EOF
            mv .env.new .env
            
            # Show the updated environment variables
            echo "Updated environment variables:"
            grep "NEXT_PUBLIC" .env
            
            echo "Stopping and removing admin panel container..."
            docker-compose stop admin
            docker-compose rm -f admin
            
            echo "Rebuilding admin panel container from scratch..."
            docker-compose build --no-cache admin
            
            echo "Starting admin panel container..."
            docker-compose up -d admin
            
            echo "Waiting for container to initialize..."
            sleep 20
            
            echo "Admin panel logs:"
            docker logs vpn-admin
            
            echo "Testing admin panel accessibility..."
            curl -s -I http://localhost:8080 || echo "Failed to connect to admin panel"
          ENDSSH

  post-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "===== Deployment Summary ====="
          echo "Environment: ${{ inputs.environment }}"
          echo "Rebuild Type: ${{ inputs.rebuild_type }}"
          echo "Status: Completed"
          echo ""
          echo "Access your services at:"
          echo "VPN Admin Panel: http://vpn-service.germanywestcentral.cloudapp.azure.com:54321"
          echo "Backend API: http://vpn-service.germanywestcentral.cloudapp.azure.com:3000"
          echo "Admin Dashboard: http://vpn-service.germanywestcentral.cloudapp.azure.com:8080"
