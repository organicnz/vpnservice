name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - development
      rebuild_type:
        description: "Type of rebuild"
        required: true
        default: "full"
        type: choice
        options:
          - full
          - backend-only
          - admin-only
          - xui-only

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set up SSH
        if: inputs.environment == "production"
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          if_key_exists: fail

      - name: Production Deployment
        if: inputs.environment == "production"
        env:
          SSH_USER: organic
          SERVER_IP: ${{ secrets.VPN_DOMAIN }}
        run: |
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=accept-new $SSH_USER@$SERVER_IP << "ENDSSH"
            # Navigate to project directory
            cd ~/dev/vpnservice
            
            # Pull latest changes from git
            echo "===== Step 1: Pulling latest changes ====="
            git pull
            
            # Stop containers
            echo "===== Step 2: Stopping existing containers ====="
            docker-compose down
            
            # Ensure environment variables are properly set
            echo "===== Step 3: Configuring environment variables ====="
            if [ -f ".env" ]; then
              # Check for SSL fix
              if ! grep -q "SECURITY_PANEL_ENFORCE_HTTPS" .env; then
                echo "Adding SSL fix to .env file..."
                echo "SECURITY_PANEL_ENFORCE_HTTPS=false" >> .env
              fi
              
              # Check for NEXT_PUBLIC variables
              if ! grep -q "NEXT_PUBLIC_SUPABASE_URL" .env; then
                echo "Adding NEXT_PUBLIC_SUPABASE_URL to .env file..."
                echo "NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}" >> .env
              fi
              
              if ! grep -q "NEXT_PUBLIC_SUPABASE_ANON_KEY" .env; then
                echo "Adding NEXT_PUBLIC_SUPABASE_ANON_KEY to .env file..."
                echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_KEY}" >> .env
              fi
            else
              echo "Error: .env file not found!"
              exit 1
            fi
          ENDSSH
