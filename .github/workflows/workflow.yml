name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
    inputs: {}

permissions:
  contents: read

# Enforce stronger concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  lint:
    # Skip this job for deployments and fixes
    if: ${{ !contains(github.event.inputs.*, 'fix') && !contains(github.event.inputs.*, 'rebuild') && !contains(github.event.inputs.*, 'deploy') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, admin-panel]
    defaults:
      run:
        working-directory: ./${{ matrix.component }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm install
      
      - name: Run linting
        run: npm run lint || echo "⚠️ Linting issues found, but continuing build"

  build:
    # Skip this job for deployments and fixes
    if: ${{ !contains(github.event.inputs.*, 'fix') && !contains(github.event.inputs.*, 'rebuild') && !contains(github.event.inputs.*, 'deploy') }}
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          load: true
          tags: vpnservice-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build admin panel image
        uses: docker/build-push-action@v5
        with:
          context: ./admin-panel
          push: false
          load: true
          tags: vpnservice-admin:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Admin panel fix job
  fix-admin-panel:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && contains(github.event.inputs.*, 'fix-admin')
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          if_key_exists: fail
      
      - name: Execute Admin Panel Fix
        env:
          SSH_USER: organic
          SERVER_IP: ${{ secrets.VPN_DOMAIN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          echo "Executing Admin Panel Fix remotely with correct Supabase URL and key..."
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=accept-new $SSH_USER@$SERVER_IP << ENDSSH
            cd ~/dev/vpnservice
            
            echo "Pulling latest changes from repository..."
            git pull origin main
            
            echo "Fixing Admin Panel Environment Variables..."
            
            # Using variables from GitHub secrets
            SUPABASE_URL="${SUPABASE_URL}"
            SUPABASE_KEY="${SUPABASE_KEY}"
            
            echo "Using Supabase URL: \$SUPABASE_URL"
            
            # Stop and remove the admin container
            echo "Stopping admin container..."
            docker stop vpn-admin || true
            docker rm vpn-admin || true
            
            # Create environment files with correct variables from secrets
            echo "Creating environment files with correct Supabase URL and key..."
            mkdir -p .env-fix
            cat > .env-fix/.env.production << EOF
            NEXT_PUBLIC_SUPABASE_URL=\$SUPABASE_URL
            NEXT_PUBLIC_SUPABASE_ANON_KEY=\$SUPABASE_KEY
            NEXT_PUBLIC_API_URL=http://backend:3000
            EOF
            
            # Create all necessary Next.js env files
            cp .env-fix/.env.production .env-fix/.env.local
            cp .env-fix/.env.production .env-fix/.env
            cp .env-fix/.env.production .env-fix/.env.production.local
            
            # Update the main .env file
            echo "Updating main .env file..."
            # Preserve existing variables
            cp .env .env.backup.$(date +%Y%m%d%H%M%S) || true
            
            # Update or add Supabase variables
            if [ -f ".env" ]; then
              # Update existing variables
              sed -i "s|SUPABASE_URL=.*|SUPABASE_URL=\$SUPABASE_URL|g" .env
              sed -i "s|SUPABASE_KEY=.*|SUPABASE_KEY=\$SUPABASE_KEY|g" .env
              sed -i "s|NEXT_PUBLIC_SUPABASE_URL=.*|NEXT_PUBLIC_SUPABASE_URL=\$SUPABASE_URL|g" .env
              sed -i "s|NEXT_PUBLIC_SUPABASE_ANON_KEY=.*|NEXT_PUBLIC_SUPABASE_ANON_KEY=\$SUPABASE_KEY|g" .env
              
              # Add if they don't exist
              grep -q "NEXT_PUBLIC_SUPABASE_URL" .env || echo "NEXT_PUBLIC_SUPABASE_URL=\$SUPABASE_URL" >> .env
              grep -q "NEXT_PUBLIC_SUPABASE_ANON_KEY" .env || echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=\$SUPABASE_KEY" >> .env
            else
              # Create new .env if it doesn't exist
              echo "SUPABASE_URL=\$SUPABASE_URL" > .env
              echo "SUPABASE_KEY=\$SUPABASE_KEY" >> .env
              echo "NEXT_PUBLIC_SUPABASE_URL=\$SUPABASE_URL" >> .env
              echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=\$SUPABASE_KEY" >> .env
              echo "NEXT_PUBLIC_API_URL=http://backend:3000" >> .env
            fi
            
            # Update docker-compose.yml if it exists
            if [ -f "docker-compose.yml" ]; then
              echo "Updating docker-compose.yml with correct Supabase URL..."
              cp docker-compose.yml docker-compose.yml.backup.$(date +%Y%m%d%H%M%S)
              
              # Try to update build args if they exist
              sed -i "s|NEXT_PUBLIC_SUPABASE_URL=.*|NEXT_PUBLIC_SUPABASE_URL=\$SUPABASE_URL|g" docker-compose.yml || true
              sed -i "s|NEXT_PUBLIC_SUPABASE_ANON_KEY=.*|NEXT_PUBLIC_SUPABASE_ANON_KEY=\$SUPABASE_KEY|g" docker-compose.yml || true
            fi
            
            # Rebuild the admin container
            echo "Rebuilding admin container with correct environment variables..."
            if command -v docker-compose &> /dev/null; then
              docker-compose build --no-cache admin
              docker-compose up -d admin
            else 
              docker compose build --no-cache admin
              docker compose up -d admin
            fi
            
            # Verify the environment variables are correct
            echo "Verifying environment variables..."
            sleep 10
            docker exec vpn-admin env | grep NEXT_PUBLIC
            
            echo "Admin panel fix complete!"
          ENDSSH
      
      - name: Verification Summary
        run: |
          echo "===== Admin Panel Fix Summary ====="
          echo "The admin panel environment variables have been updated with:"
          echo "- SUPABASE_URL: ${{ secrets.SUPABASE_URL }}"
          echo "- SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }} (partially hidden for security)"
          echo ""
          echo "The admin panel has been rebuilt with the correct environment variables."
          echo "Admin Panel should now be accessible at:"
          echo "http://${{ secrets.VPN_DOMAIN }}:8080"
          echo ""
          echo "If issues persist, check the logs on the server with:"
          echo "  docker logs vpn-admin"

  # Standard deployment job
  deploy:
    runs-on: ubuntu-latest
    # Only run on main branch or manual trigger
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          if_key_exists: fail

      - name: Deploy to Server
        env:
          SSH_USER: organic
          SERVER_IP: ${{ secrets.VPN_DOMAIN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=accept-new $SSH_USER@$SERVER_IP << 'ENDSSH'
            set +e
            echo "===== Starting Deployment Process ====="
            
            # Navigate to project directory
            mkdir -p ~/dev
            cd ~/dev
            
            if [ ! -d "vpnservice" ]; then
              echo "Cloning repository..."
              git clone ${{ github.server_url }}/${{ github.repository }}.git
              cd vpnservice
            else
              cd vpnservice
              echo "Pulling latest changes..."
              git fetch --prune
              git reset --hard origin/main
            fi

            # Copy .env file if it doesn't exist
            if [ ! -f ".env" ]; then
              echo "Setting up environment variables..."
              cp .env.example .env
              # Update with GitHub secrets
              echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
              echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env
              echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
              echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_KEY }}" >> .env
              echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
              echo "XUI_USERNAME=${{ secrets.XUI_USERNAME }}" >> .env
              echo "XUI_PASSWORD=${{ secrets.XUI_PASSWORD }}" >> .env
              echo "VPN_DOMAIN=${VPN_DOMAIN:-${{ secrets.VPN_DOMAIN }}}" >> .env
              echo "VPN_ADMIN_EMAIL=${VPN_ADMIN_EMAIL:-admin@example.com}" >> .env
              echo "NODE_ENV=production" >> .env
            fi

            # Also update the .env with correct Supabase variables if they exist
            if [ -f ".env" ]; then
              sed -i "s|SUPABASE_URL=.*|SUPABASE_URL=${{ secrets.SUPABASE_URL }}|g" .env
              sed -i "s|SUPABASE_KEY=.*|SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}|g" .env
              sed -i "s|NEXT_PUBLIC_SUPABASE_URL=.*|NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}|g" .env
              sed -i "s|NEXT_PUBLIC_SUPABASE_ANON_KEY=.*|NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_KEY }}|g" .env
              
              # Add if they don't exist
              grep -q "NEXT_PUBLIC_SUPABASE_URL" .env || echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
              grep -q "NEXT_PUBLIC_SUPABASE_ANON_KEY" .env || echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_KEY }}" >> .env
            fi

            # Start or restart Docker services
            echo "Starting Docker services..."
            if command -v docker-compose &> /dev/null; then
              docker-compose down || true
              docker-compose build || echo "⚠️ Build issues, but continuing"
              docker-compose up -d || echo "⚠️ Start issues, but continuing"
            else
              docker compose down || true
              docker compose build || echo "⚠️ Build issues, but continuing"
              docker compose up -d || echo "⚠️ Start issues, but continuing"
            fi

            # Verify services are running
            echo "===== Deployed Services ====="
            docker ps
            
            # Print access URLs
            echo "===== Service Access Information ====="
            DOMAIN=${VPN_DOMAIN:-localhost}
            echo "VPN Admin Panel: https://$DOMAIN:54321"
            echo "Backend API: http://$DOMAIN:3000"
            echo "Admin Dashboard: http://$DOMAIN:8080"
            echo "Admin Email: ${VPN_ADMIN_EMAIL:-admin@example.com}"
            
            echo "===== Deployment Complete ====="
            # Always succeed
            exit 0
          ENDSSH

  # Rebuild specific components
  rebuild-component:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && (contains(github.event.inputs.*, 'rebuild-admin') || contains(github.event.inputs.*, 'rebuild-backend') || contains(github.event.inputs.*, 'rebuild-xui'))
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          if_key_exists: fail
      
      - name: Determine component to rebuild
        id: component
        run: |
          if [[ "${{ github.event.inputs.* }}" == *"rebuild-admin"* ]]; then
            echo "component_name=admin" >> $GITHUB_OUTPUT
            echo "container_name=vpn-admin" >> $GITHUB_OUTPUT
            echo "port=8080" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.* }}" == *"rebuild-backend"* ]]; then
            echo "component_name=backend" >> $GITHUB_OUTPUT
            echo "container_name=vpn-backend" >> $GITHUB_OUTPUT
            echo "port=3000" >> $GITHUB_OUTPUT
          else
            echo "component_name=xui" >> $GITHUB_OUTPUT
            echo "container_name=xray-ui" >> $GITHUB_OUTPUT
            echo "port=54321" >> $GITHUB_OUTPUT
          fi
      
      - name: Rebuild Specific Component
        env:
          SSH_USER: organic
          SERVER_IP: ${{ secrets.VPN_DOMAIN }}
          COMPONENT: ${{ steps.component.outputs.component_name }}
          CONTAINER: ${{ steps.component.outputs.container_name }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          echo "Rebuilding $COMPONENT component remotely..."
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=accept-new $SSH_USER@$SERVER_IP << ENDSSH
            cd ~/dev/vpnservice
            
            echo "Pulling latest changes from repository..."
            git pull origin main
            
            # Update .env file with correct values if rebuilding admin
            if [ "$COMPONENT" = "admin" ]; then
              echo "Updating environment variables for admin panel..."
              if [ -f ".env" ]; then
                sed -i "s|SUPABASE_URL=.*|SUPABASE_URL=${SUPABASE_URL}|g" .env
                sed -i "s|SUPABASE_KEY=.*|SUPABASE_KEY=${SUPABASE_KEY}|g" .env
                sed -i "s|NEXT_PUBLIC_SUPABASE_URL=.*|NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}|g" .env
                sed -i "s|NEXT_PUBLIC_SUPABASE_ANON_KEY=.*|NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_KEY}|g" .env
                
                # Add if they don't exist
                grep -q "NEXT_PUBLIC_SUPABASE_URL" .env || echo "NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}" >> .env
                grep -q "NEXT_PUBLIC_SUPABASE_ANON_KEY" .env || echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_KEY}" >> .env
              fi
              
              # Also update docker-compose.yml if it exists
              if [ -f "docker-compose.yml" ]; then
                echo "Updating docker-compose.yml with correct Supabase URL..."
                cp docker-compose.yml docker-compose.yml.backup.$(date +%Y%m%d%H%M%S)
                
                # Try to update build args if they exist
                sed -i "s|NEXT_PUBLIC_SUPABASE_URL=.*|NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}|g" docker-compose.yml || true
                sed -i "s|NEXT_PUBLIC_SUPABASE_ANON_KEY=.*|NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_KEY}|g" docker-compose.yml || true
              fi
            fi
            
            echo "Stopping and removing the $COMPONENT container..."
            docker stop $CONTAINER || true
            docker rm $CONTAINER || true
            
            echo "Rebuilding $COMPONENT container..."
            if command -v docker-compose &> /dev/null; then
              docker-compose build --no-cache $COMPONENT
              docker-compose up -d $COMPONENT
            else
              docker compose build --no-cache $COMPONENT
              docker compose up -d $COMPONENT
            fi
            
            echo "Waiting for container to initialize (30 seconds)..."
            sleep 30
            
            echo "Container status:"
            docker ps | grep $CONTAINER
            
            echo "Container logs:"
            docker logs $CONTAINER | tail -n 30
            
            # Verify environment variables for admin panel
            if [ "$COMPONENT" = "admin" ]; then
              echo "Verifying admin panel environment variables:"
              docker exec $CONTAINER env | grep NEXT_PUBLIC
            fi
          ENDSSH
      
      - name: Component Rebuild Summary
        run: |
          echo "===== ${{ steps.component.outputs.component_name }} Rebuild Summary ====="
          echo "The ${{ steps.component.outputs.component_name }} component has been rebuilt."
          
          if [ "${{ steps.component.outputs.component_name }}" = "admin" ]; then
            echo ""
            echo "Admin panel was rebuilt with the following environment variables:"
            echo "- SUPABASE_URL: ${{ secrets.SUPABASE_URL }}"
            echo "- SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }} (partially hidden for security)"
          fi
          
          echo ""
          echo "Component should now be accessible at:"
          if [ "${{ steps.component.outputs.component_name }}" = "xui" ]; then
            echo "https://${{ secrets.VPN_DOMAIN }}:${{ steps.component.outputs.port }}"
          else
            echo "http://${{ secrets.VPN_DOMAIN }}:${{ steps.component.outputs.port }}"
          fi 
