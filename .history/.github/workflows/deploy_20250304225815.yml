name: Deploy to Azure VM

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          if_key_exists: fail

      - name: Deploy to Azure VM
        env:
          SSH_USER: organic
          SERVER_IP: vpn-service.germanywestcentral.cloudapp.azure.com
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ssh $SSH_USER@$SERVER_IP << 'ENDSSH'
            echo "===== Starting Deployment Process ====="
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              # Ensure docker permission changes take effect
              newgrp docker
            fi

            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null && ! command -v docker &> /dev/null || ! docker compose version &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
            fi

            # Navigate to project directory (create if it doesn't exist)
            echo "Setting up project directory..."
            mkdir -p ~/dev
            cd ~/dev
            
            if [ ! -d "vpnservice" ]; then
              echo "Cloning repository..."
              git clone https://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@github.com/organicnz/vpnservice.git
              cd vpnservice
            else
              cd vpnservice
              echo "Pulling latest changes..."
              git fetch
              git reset --hard origin/main
            fi

            # Create placeholder admin-panel directory if it doesn't exist
            if [ ! -d "admin-panel" ]; then
              echo "Creating placeholder admin-panel directory..."
              mkdir -p admin-panel
              echo "This is a placeholder directory. Admin panel is not implemented yet." > admin-panel/README.md
              
              # Create a simple Dockerfile without heredoc
              echo "FROM nginx:alpine" > admin-panel/Dockerfile
              echo "WORKDIR /usr/share/nginx/html" >> admin-panel/Dockerfile
              echo "COPY . ." >> admin-panel/Dockerfile
              echo "EXPOSE 8080" >> admin-panel/Dockerfile
              echo "CMD [\"nginx\", \"-g\", \"daemon off;\"]" >> admin-panel/Dockerfile
            fi

            # Copy .env file if it doesn't exist
            if [ ! -f ".env" ]; then
              echo "Setting up environment variables..."
              cp .env.example .env
              # Here you would edit .env with the correct values
              echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
              echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env
              echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env
              echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
            fi

            # Start or restart Docker services
            echo "Starting Docker services..."
            if command -v docker-compose &> /dev/null; then
              docker-compose down
              docker-compose up -d
            else
              docker compose down
              docker compose up -d
            fi

            # Verify services are running
            echo "===== Deployed Services ====="
            docker ps
            
            # Check if backend service is running
            if ! docker ps | grep -q vpn-backend; then
              echo "❌ Backend service is not running, checking logs..."
              docker ps -a | grep vpn-backend
              echo "===== Backend Service Logs ====="
              docker logs vpn-backend 2>&1 || echo "No logs available - container might have failed to start"
              
              echo "===== Backend Build Logs ====="
              docker images | grep backend
              docker history vpnservice-backend:latest --no-trunc || echo "Image not found"
              
              echo "===== Docker Compose Logs ====="
              if command -v docker-compose &> /dev/null; then
                docker-compose logs
              else
                docker compose logs
              fi
              
              exit 1
            fi

            # Wait for services to start
            echo "Waiting for services to initialize (30 seconds)..."
            sleep 30

            # Install curl for testing if not present
            if ! command -v curl &> /dev/null; then
              echo "Installing curl for testing..."
              sudo apt-get update && sudo apt-get install -y curl
            fi
            
            # Install jq for JSON parsing if not present
            if ! command -v jq &> /dev/null; then
              echo "Installing jq for JSON parsing..."
              sudo apt-get update && sudo apt-get install -y jq
            fi

            # Test backend API connection
            echo "===== Testing Backend API ====="
            echo "Testing backend API health..."
            
            # Check HTTP status code
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health)
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "✅ Backend API health endpoint returned status 200"
            else
              echo "❌ Backend API health check failed - HTTP status: $HTTP_STATUS"
              # Display docker logs for debugging
              echo "===== Backend Service Logs ====="
              docker logs vpn-backend
              exit 1
            fi
            
            # Check response content
            HEALTH_RESPONSE=$(curl -s http://localhost:3000/health)
            API_STATUS=$(echo $HEALTH_RESPONSE | jq -r '.status' 2>/dev/null)
            
            if [ "$API_STATUS" = "ok" ]; then
              echo "✅ Backend API health check passed - Service status: $API_STATUS"
            else
              echo "❌ Backend API health check failed - Unexpected response: $HEALTH_RESPONSE"
              # Display docker logs for debugging
              echo "===== Backend Service Logs ====="
              docker logs vpn-backend
              exit 1
            fi
            
            # Test root endpoint
            echo "Testing backend API root endpoint..."
            ROOT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/)
            if [ "$ROOT_STATUS" -eq 200 ]; then
              echo "✅ Backend API root endpoint returned status 200"
            else
              echo "❌ Backend API root endpoint test failed - HTTP status: $ROOT_STATUS"
              # Display docker logs for debugging
              echo "===== Backend Service Logs ====="
              docker logs vpn-backend
              exit 1
            fi

            # Test Supabase connection
            echo "===== Testing Supabase Connection ====="
            if [ -f "./test-connection.sh" ]; then
              chmod +x ./test-connection.sh
              ./test-connection.sh
              
              # Check the exit code of test-connection.sh
              if [ $? -ne 0 ]; then
                echo "❌ Supabase connection test failed"
                exit 1
              fi
            else
              echo "❌ test-connection.sh not found - skipping Supabase connection test"
            fi
            
            # Note: Admin panel tests commented out since admin panel service is not implemented yet
            
            # Test VPN panel
            echo "===== Testing VPN Panel ====="
            VPN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -k https://localhost:54321/)
            if [ "$VPN_STATUS" -eq 200 ] || [ "$VPN_STATUS" -eq 302 ]; then
              echo "✅ VPN panel is accessible"
            else
              echo "❌ VPN panel test failed - HTTP status: $VPN_STATUS"
              # Not failing the build for this, as it's not critical
            fi

            # Print access URLs
            echo "===== Service Access Information ====="
            echo "VPN Admin Panel: https://vpn-service.germanywestcentral.cloudapp.azure.com:54321"
            echo "Backend API: https://vpn-service.germanywestcentral.cloudapp.azure.com:3000"
            # echo "Admin Dashboard: https://vpn-service.germanywestcentral.cloudapp.azure.com:8080" # Commented out as admin panel is not implemented yet
            echo "Telegram Bot: @CyberDolphinBot"
            
            echo "===== Deployment Complete ====="
          ENDSSH

      - name: Commit changes
        run: git add . && git commit -m "Fix(backend): update app structure and resolve container startup issues" && git push --set-upstream origin --force 