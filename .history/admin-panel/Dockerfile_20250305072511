# Use Node.js 20 as the base image
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Install additional tools needed for some npm packages
RUN apk add --no-cache libc6-compat python3 make g++

# Copy package files
COPY package.json package-lock.json* ./

# Install dependencies with a more resilient approach
RUN if [ -f package-lock.json ]; then \
      npm ci --prefer-offline --no-audit; \
    else \
      echo "No package-lock.json found, using npm install instead"; \
      npm install; \
    fi

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Ensure public directory exists to prevent COPY errors later
RUN mkdir -p public

# Set environment variables
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production
# Provide dummy values for build time to prevent build failures
# These will be overridden at runtime with real values
ENV NEXT_PUBLIC_SUPABASE_URL=https://dummy-value-for-build.supabase.co
ENV NEXT_PUBLIC_SUPABASE_ANON_KEY=dummy-key-for-build-only
ENV NEXT_PUBLIC_API_URL=http://localhost:3000
# Special env var to skip static generation of pages that need auth during build
ENV SKIP_BUILD_STATIC_GENERATION=true

# Create a temporary file to override exports in pages
RUN echo '// This file tells Next.js to skip static generation\nexport const dynamic = "force-dynamic";\n' > ./src/app/skip-static.js

# Build the application
RUN npm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

# Create a non-root user and set permissions
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Set proper permissions for /tmp to avoid permission issues
RUN mkdir -p /tmp/next
RUN chmod -R 777 /tmp/next

# Set the working directory to the app directory
WORKDIR /app

# Create necessary directories
RUN mkdir -p ./public ./.next/static

# Copy built application (with error handling for missing files)
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Switch to non-root user for enhanced security
USER nextjs

# Expose the listening port
EXPOSE 3000

# Add healthcheck to verify service is running
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD [ "node", "-e", "require('http').get('http://localhost:3000/', (res) => res.statusCode === 200 ? process.exit(0) : process.exit(1))" ]

# Set the command to run the app
CMD ["node", "server.js"] 