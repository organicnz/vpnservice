version: '3.8'

# Global x-* fields for reuse
x-logging: &default-logging
  driver: json-file
  options:
    max-size: 10m
    max-file: 3

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 20s

services:
  # 3x-ui VPN Panel
  xui:
    image: ghcr.io/mhsanaei/3x-ui:latest
    container_name: xray-ui
    restart: unless-stopped
    ports:
      - 54321:2053 # Panel port (external:internal)
      - 443:443     # HTTPS port (for Xray services)
      - 80:80       # HTTP port (for certbot)
    environment:
      - TZ=${TIMEZONE:-Europe/Moscow}
      - XRAY_VMESS_AEAD_FORCED=${XRAY_VMESS_AEAD_FORCED:-false}
      - XUI_USERNAME=${XUI_USERNAME:-admin}
      - XUI_PASSWORD=${XUI_PASSWORD:-admin}
      - SECURITY_PANEL_ENFORCE_HTTPS=false
    volumes:
      - ./data/xray/db/:/etc/x-ui/:rw
      - ./data/xray/cert/:/root/cert/:ro
    networks:
      - vpn-network
    healthcheck:
      <<: *default-healthcheck
      test: [CMD, wget, -qO-, http://localhost:2053/]
    logging: *default-logging
    # Security and resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s

  # Backend API Service (Now using Supabase)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: vpn-backend
    restart: unless-stopped
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - XUI_PANEL_URL=http://xui:2053
      - XUI_USERNAME=${XUI_USERNAME:-admin}
      - XUI_PASSWORD=${XUI_PASSWORD:-admin}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      # Performance tuning
      - NODE_OPTIONS=--max-old-space-size=512
    ports:
      - 3000:3000
    networks:
      - vpn-network
    depends_on:
      xui:
        condition: service_healthy
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: [CMD, wget, -qO-, http://localhost:3000/health]
      timeout: 5s
    # Security and resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    tmpfs:
      - /tmp

  # Admin Panel
  admin:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-production}
        - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL:-https://dummy-value-for-build.supabase.co}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_KEY:-dummy-key-for-build-only}
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://backend:3000}
    container_name: vpn-admin
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_KEY}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://backend:3000}
      # Performance tuning
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=512
    ports:
      - 8080:3000  # Map container's 3000 port to host's 8080
    networks:
      - vpn-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: [CMD, wget, -qO-, http://localhost:3000/]
    # Security and resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    read_only: false # Next.js needs write access
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

networks:
  vpn-network:
    driver: bridge
    # Enhanced network security
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
    driver_opts:
      com.docker.network.bridge.name: vpn0 